name: NexaCLI on MacOS

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-cli:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Tag Version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Detect Commit Hash
        if: github.event_name == 'workflow_dispatch'
        run: echo "VERSION=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
          cache-dependency-path: runner/go.sum

      - name: Build Nexa Cli
        run: make build

      - name: Download runtime (without mlx)
        if: matrix.os == 'macos-13'
        run: |
          make download BRIDGE_BACKEND=llama-cpp-metal

      - name: Download runtime
        if: matrix.os != 'macos-13'
        run: |
          make download BRIDGE_BACKEND=llama-cpp-metal
          make download BRIDGE_BACKEND=mlx

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexa-cli_${{ matrix.os }}
          path: build
          include-hidden-files: true

  package-and-release:
    name: pckage PKG for ${{ matrix.os }} and release
    needs: build-cli
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]
    env:
      VERSION: ${{ github.ref_name }}
      RELEASE_REPO: zhiyuan8/homebrew-go-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts 
        uses: actions/download-artifact@v4
        with:
          name: nexa-cli_${{ matrix.os }}
          path: build

      - name: Prepare file structure for packaging
        id: prep_files
        run: |
          APP_BASE="staging/Applications"
          APP_NAME="Nexa CLI"
          APP_PATH="${APP_BASE}/${APP_NAME}.app"     
          mkdir -p "${APP_PATH}/Contents/MacOS"
          mkdir -p "${APP_PATH}/Contents/Resources"

          mv build/nexa build/nexa-cli build/lib "${APP_PATH}/Contents/Resources/"
          cp release/scripts/uninstall.sh "${APP_PATH}/Contents/Resources/"
          chmod +x "${APP_PATH}/Contents/Resources/uninstall.sh"
          cp release/nexa-icon.icns "${APP_PATH}/Contents/Resources/nexa-icon.icns"

          cat << EOF > "${APP_PATH}/Contents/Info.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>${APP_NAME}</string>
              <key>CFBundleDisplayName</key>
              <string>${APP_NAME}</string>
              <key>CFBundleIdentifier</key>
              <string>com.nexaai.nexa-cli</string>
              <key>CFBundleVersion</key>
              <string>${{ env.VERSION }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleExecutable</key>
              <string>launcher</string>
              <key>NSAppleScriptEnabled</key>
              <true/>
              <key>CFBundleIconFile</key>
              <string>nexa-icon</string>
          </dict>
          </plist>
          EOF

          cat << EOF > "${APP_PATH}/Contents/MacOS/launcher"
          #!/usr/bin/osascript

          tell application "Terminal"
              activate
              do script "nexa"
          end tell
          EOF

          chmod +x "${APP_PATH}/Contents/MacOS/launcher"
          mkdir -p pkg_scripts
          cp release/scripts/postinstall pkg_scripts/
          chmod +x pkg_scripts/postinstall
          echo "STAGING_DIR=$(pwd)/staging" >> $GITHUB_OUTPUT
          echo "SCRIPTS_DIR=$(pwd)/pkg_scripts" >> $GITHUB_OUTPUT
          echo "APP_PATH=$(pwd)/${APP_PATH}" >> $GITHUB_ENV

      - name: Import Code-Signing Certificates
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Sign binaries and libraries
        run: |
          cd "${{ env.APP_PATH }}/Contents/Resources"
          find lib -type f -name "*.dylib" -o -name "*.so" -exec codesign --force --options runtime --timestamp --verify --verbose -s "${{ secrets.APPLE_ID_APPLICATION }}" {} \;
          if [ -d "lib/mlx/python_runtime/bin" ]; then
            find lib/mlx/python_runtime/bin -type f -name "python*" -exec codesign --force --options runtime --timestamp --verify --verbose -s "${{ secrets.APPLE_ID_APPLICATION }}" {} \;
          fi
          codesign --force --options runtime --timestamp --verify --verbose -s "${{ secrets.APPLE_ID_APPLICATION }}" nexa
          codesign --force --options runtime --timestamp --verify --verbose -s "${{ secrets.APPLE_ID_APPLICATION }}" nexa-cli  
          cd ../MacOS
          codesign --force --options runtime --timestamp --verify --verbose -s "${{ secrets.APPLE_ID_APPLICATION }}" launcher
          cd ${{ github.workspace }}
          codesign --force --options runtime --timestamp --verify --verbose -s "${{ secrets.APPLE_ID_APPLICATION }}" "${{ env.APP_PATH }}"
      
      - name: Build PKG
        run: |
          pkgbuild --root "${{ steps.prep_files.outputs.STAGING_DIR }}" \
                   --scripts "${{ steps.prep_files.outputs.SCRIPTS_DIR }}" \
                   --identifier "com.nexaai.sdk" \
                   --version "${{ env.VERSION }}" \
                   --install-location / \
                   "build/nexa-cli_${{ matrix.os }}-unsigned.pkg"

      - name: Productsign PKG
        run: |
          productsign --sign "${{ secrets.APPLE_ID_INSTALLER }}" --timestamp "build/nexa-cli_${{ matrix.os }}-unsigned.pkg" "build/nexa-cli_${{ matrix.os }}.pkg"
          pkgutil --check-signature "build/nexa-cli_${{ matrix.os }}.pkg"
          rm "build/nexa-cli_${{ matrix.os }}-unsigned.pkg"
        
      - name: Notarize & Staple PKG
        run: |
          # xcrun notarytool submit "build/nexa-cli_${{ matrix.os }}.pkg" \
          #   --apple-id "${{ secrets.APPLE_ID }}" \
          #   --password "${{ secrets.APPLE_ID_PASSWORD }}" \
          #   --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          #   --wait

          # stapler staple -v "build/nexa-cli_${{ matrix.os }}.pkg"

          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "build/nexa-cli_${{ matrix.os }}.pkg" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait)
          echo "Submission output:"
          echo "$NOTARIZATION_OUTPUT"
          
          # Extract the submission ID (ensuring it's a single line)
          SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep 'id:' | head -n 1 | awk '{print $2}' | tr -d '\n')
          echo "Extracted Submission ID: $SUBMISSION_ID"
          
          if [ -z "$SUBMISSION_ID" ]; then
            echo "Failed to extract submission ID. Notarization likely failed."
            exit 1
          fi
          
          # Wait for notarization to complete and check the result
          MAX_ATTEMPTS=10
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking notarization status..."
            
            NOTARIZATION_INFO=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}")
            STATUS=$(echo "$NOTARIZATION_INFO" | grep "status:" | cut -d: -f2 | xargs)
            echo "Notarization status: $STATUS"
            
            if [ "$STATUS" = "Accepted" ]; then
              echo "Notarization successful"
              echo "Stapling notarization ticket to the package..."
              xcrun stapler staple "build/nexa-cli_${{ matrix.os }}.pkg"
              echo "Notarization ticket stapled to the package"
              break
            elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
              echo "Notarization failed. Fetching detailed log..."
              xcrun notarytool log "$SUBMISSION_ID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}"
              echo "Notarization failed. See log above for details."
              exit 1
            fi
            
            echo "Waiting for 30 seconds before checking again..."
            sleep 30
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Error: Notarization timed out after $MAX_ATTEMPTS attempts"
            exit 1
          fi
            

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ env.RELEASE_REPO }}
          files: "build/nexa-cli_${{ matrix.os }}.pkg"
          tag_name: ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.NEXASDK_RELEASE_TOKEN }}Â·

  release-and-update-tap:
    name: Create Release and Update Homebrew Tap
    needs: build-cli
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
      TAP_REPO: zhiyuan8/homebrew-go
      RELEASE_REPO: zhiyuan8/homebrew-go-release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Packages for Release
        id: package
        run: |
          mkdir release_packages
          for dir in artifacts/*/; do
            dir_name=$(basename "$dir")
            package_name="${dir_name}_${{ env.VERSION }}.tar.gz"
            tar -czf "release_packages/${package_name}" -C "$dir" .
          done
          echo "packages_path=release_packages" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ env.RELEASE_REPO }}
          files: ${{ steps.package.outputs.packages_path }}/*.tar.gz
          tag_name: ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.NEXASDK_RELEASE_TOKEN }}

      - name: Checkout Homebrew Tap Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TAP_REPO }}
          path: homebrew-tap
          token: ${{ secrets.NEXASDK_RELEASE_TOKEN }}

      - name: Generate and Update manifest.json
        run: |
          set -e

          TAP_DIR="homebrew-tap"
          MANIFEST_FILE="$TAP_DIR/manifest.json"

          # --- 1. Init Manifest ---
          if [[ -f "$MANIFEST_FILE" ]]; then
            manifest_json=$(cat "$MANIFEST_FILE")
          else
            manifest_json='{"version": "", "url_template": "", "platforms": {}}'
          fi

          # --- 2. Update Top Level ---
          manifest_json=$(echo "$manifest_json" | jq \
            --arg version "${VERSION#v}" \
            --arg url_template "https://github.com/${{ env.RELEASE_REPO }}/releases/download/v{version}/{artifact_name}_v{version}.tar.gz" \
            '.version = $version | .url_template = $url_template')

          # --- 3. Iterate and Update manifest ---
          for pkg in release_packages/*.tar.gz; do
            sha256=$(sha256sum "$pkg" | awk '{print $1}')

            # e.g., nexa-cli_macos-14_v0.1.0.tar.gz -> nexa-cli_macos-14 -> macos-14
            pkg_name=$(basename "$pkg")
            artifact_name=$(echo "$pkg_name" | sed -E "s/_${{ env.VERSION }}\.tar\.gz$//")
            platform_string=$(echo "$artifact_name" | sed 's/nexa-cli_//')

            case "$platform_string" in
              macos-13)
                jq_path='.platforms.ventura.x86_64'
                ;;
              macos-14)
                jq_path='.platforms.sonoma.arm64'
                ;;
              macos-15)
                jq_path='.platforms."sequoia_and_later".arm64'
                ;;
              *)
                echo "::warning title=Unhandled Package::Skipping unhandled package format: $platform_string"
                continue
                ;;
            esac

            echo "Updating manifest for '$platform_string'..."

            # --- 4. Update JSON ---
            update_expression="$jq_path = {\"artifact_name\": \"$artifact_name\", \"sha256\": \"$sha256\"}"
            manifest_json=$(echo "$manifest_json" | jq "$update_expression")
          done

          # --- 5. Write JSON ---
          echo "$manifest_json" | jq '.' > "$MANIFEST_FILE"

          echo "Final manifest.json:"
          cat "$MANIFEST_FILE"

      - name: Commit and Push Manifest
        run: |
          cd homebrew-tap
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions@github.com"
          if [[ -n $(git status --porcelain manifest.json) ]]; then
            git add manifest.json
            git commit -m "Update manifest for nexa version ${{ env.VERSION }}"
            git push
          else
            echo "No changes detected in manifest.json."
          fi