name: NexaCLI on MacOS

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-cli:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Tag Version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Detect Commit Hash
        if: github.event_name == 'workflow_dispatch'
        run: echo "VERSION=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
          cache-dependency-path: runner/go.sum

      - name: Build Nexa Cli
        run: make build

      - name: Download runtime (without mlx)
        if: matrix.os == 'macos-13'
        run: |
          make download BRIDGE_BACKEND=llama-cpp-metal

      - name: Download runtime
        if: matrix.os != 'macos-13'
        run: |
          make download BRIDGE_BACKEND=llama-cpp-metal
          make download BRIDGE_BACKEND=mlx

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexa-cli_${{ matrix.os }}
          path: build
          include-hidden-files: true

  package-and-release:
    name: pckage PKG for ${{ matrix.os }} and release
    needs: build-cli
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]
    env:
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nexa-cli_${{ matrix.os }}
          path: build

      - name: Prepare file structure for packaging
        id: prep_files
        run: |
          APP_BASE="staging/Applications"
          APP_NAME="NexaCLI"
          APP_PATH="${APP_BASE}/${APP_NAME}.app"
          mkdir -p "${APP_PATH}/Contents/MacOS"
          mkdir -p "${APP_PATH}/Contents/Resources"

          mv build/nexa build/nexa-cli build/lib "${APP_PATH}/Contents/Resources/"
          cp release/scripts/uninstall.sh "${APP_PATH}/Contents/Resources/"
          chmod +x "${APP_PATH}/Contents/Resources/uninstall.sh"
          cp release/nexa-icon.icns "${APP_PATH}/Contents/Resources/nexa-icon.icns"

          cat << EOF > "${APP_PATH}/Contents/Info.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>${APP_NAME}</string>
              <key>CFBundleDisplayName</key>
              <string>Nexa CLI</string>
              <key>CFBundleIdentifier</key>
              <string>com.nexaai.nexa-sdk</string>
              <key>CFBundleVersion</key>
              <string>${{ env.VERSION }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleExecutable</key>
              <string>launcher</string>
              <key>NSAppleScriptEnabled</key>
              <true/>
              <key>CFBundleIconFile</key>
              <string>nexa-icon</string>
          </dict>
          </plist>
          EOF

          cat << EOF > "${APP_PATH}/Contents/MacOS/launcher"
          #!/usr/bin/osascript

          tell application "Terminal"
              activate
              do script "nexa"
          end tell
          EOF

          chmod +x "${APP_PATH}/Contents/MacOS/launcher"
          chmod +x "${APP_PATH}/Contents/Resources/nexa"
          chmod +x "${APP_PATH}/Contents/Resources/nexa-cli"
          if [ -d "${APP_PATH}/Contents/Resources/lib/mlx/python_runtime/bin" ]; then
            chmod -R +x "${APP_PATH}/Contents/Resources/lib/mlx/python_runtime/bin"
          fi
          mkdir -p pkg_scripts
          cp release/scripts/preinstall pkg_scripts/
          chmod +x pkg_scripts/preinstall
          cp release/scripts/postinstall pkg_scripts/
          chmod +x pkg_scripts/postinstall
          echo "STAGING_DIR=$(pwd)/staging" >> $GITHUB_OUTPUT
          echo "SCRIPTS_DIR=$(pwd)/pkg_scripts" >> $GITHUB_OUTPUT
          echo "APP_PATH=$(pwd)/${APP_PATH}" >> $GITHUB_ENV

      - name: Fix dylib Linkages (RPATH)
        run: |
          cp "${APP_PATH}/Contents/Resources/nexa-cli" "${APP_PATH}/Contents/Resources/nexa-cli-mlx"
          install_name_tool -change libnexa_bridge.dylib "/Applications/NexaCLI.app/Contents/Resources/lib/llama-cpp-metal/libnexa_bridge.dylib" "${APP_PATH}/Contents/Resources/nexa-cli"
          install_name_tool -change libnexa_bridge.dylib "/Applications/NexaCLI.app/Contents/Resources/lib/mlx/libnexa_bridge.dylib" "${APP_PATH}/Contents/Resources/nexa-cli-mlx"

      - name: Import Code Signing Certificates
        env:
          APP_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APP_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_BASE64 }}
          INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo $APP_CERTIFICATE_BASE64 | base64 --decode > app_certificate.p12
          echo $INSTALLER_CERTIFICATE_BASE64 | base64 --decode > installer_certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import app_certificate.p12 -k build.keychain -P $APP_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security import installer_certificate.p12 -k build.keychain -P $INSTALLER_CERTIFICATE_PASSWORD -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

      - name: Sign binaries and libraries
        run: |
          cd "${{ env.APP_PATH }}/Contents/Resources"
          find lib -type f \( -name "*.dylib" -o -name "*.so" \) -exec codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" {} \;
          if [ -d "lib/mlx/python_runtime/bin" ]; then
            find lib/mlx/python_runtime/bin -type f -name "python*" -exec codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" {} \;
          fi

          codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" nexa
          codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" nexa-cli
          codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" nexa-cli-mlx
          cd ../MacOS
          codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" launcher
          cd ${{ github.workspace }}
          codesign --force --options runtime --timestamp --verify -s "${{ secrets.APPLE_ID_APPLICATION }}" "${{ env.APP_PATH }}"

      - name: Build PKG
        run: |
          pkgbuild --root "${{ steps.prep_files.outputs.STAGING_DIR }}" \
                   --scripts "${{ steps.prep_files.outputs.SCRIPTS_DIR }}" \
                   --identifier "com.nexaai.nexa-sdk" \
                   --version "${{ env.VERSION }}" \
                   --install-location / \
                   "build/nexa-cli_${{ matrix.os }}-unsigned.pkg"

      - name: Productsign PKG
        run: |
          productsign --sign "${{ secrets.APPLE_ID_INSTALLER }}" --timestamp "build/nexa-cli_${{ matrix.os }}-unsigned.pkg" "build/nexa-cli_${{ matrix.os }}.pkg"
          pkgutil --check-signature "build/nexa-cli_${{ matrix.os }}.pkg"
          rm "build/nexa-cli_${{ matrix.os }}-unsigned.pkg"

      - name: Notarize & Staple PKG
        run: |
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "build/nexa-cli_${{ matrix.os }}.pkg" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait)
          SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep 'id:' | head -n 1 | awk '{print $2}' | tr -d '\n')

          if [ -z "$SUBMISSION_ID" ]; then
            echo "Failed to extract submission ID. Notarization likely failed."
            exit 1
          fi

          # Wait for notarization to complete and check the result
          MAX_ATTEMPTS=10
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking notarization status..."

            NOTARIZATION_INFO=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}")
            STATUS=$(echo "$NOTARIZATION_INFO" | grep "status:" | cut -d: -f2 | xargs)
            echo "Notarization status: $STATUS"

            if [ "$STATUS" = "Accepted" ]; then
              echo "Notarization successful"
              echo "Stapling notarization ticket to the package..."
              xcrun stapler staple "build/nexa-cli_${{ matrix.os }}.pkg"
              echo "Notarization ticket stapled to the package"
              break
            elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
              echo "Notarization failed. Fetching detailed log..."
              xcrun notarytool log "$SUBMISSION_ID" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}"
              echo "Notarization failed. See log above for details."
              exit 1
            fi

            echo "Waiting for 30 seconds before checking again..."
            sleep 30
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Error: Notarization timed out after $MAX_ATTEMPTS attempts"
            exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          repository: NexaAI/nexa-sdk
          files: "build/nexa-cli_${{ matrix.os }}.pkg"
          tag_name: ${{ env.VERSION }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.NEXASDK_RELEASE_TOKEN }}
